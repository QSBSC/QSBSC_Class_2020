metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
# implement the FlowSOM on the data by running the line below (to see help page
# for FlowSOM, type "?FlowSOM --> enter" in console)
fsom <-
FlowSOM(
flowframe,      # input flowframe
colsToUse = c(1:2),  # columns to use
nClus = CLUSTER_NUM,          # target number of clusters (this can be changed)
seed = OVERALL_SEED  # set seed for reproducibility
)
FlowSOM.clusters.tsne <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
cat("\n\n...'run_FlowSOM_on_t-SNE' finished running")
# Time <10 sec
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors,
rownames(qual_col_pals)))
# plot FlowSOM clusters on t-SNE axes
ggplot(tsne.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.tsne), cex = 0.3) +
labs(x = "t-SNE 1", y = "t-SNE 2",title = "FlowSOM Clustering on t-SNE Axes",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4))) +
scale_color_manual(values = sample(col_vector)) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
cat("\n\n...'plot_t-SNE_FlowSOM_clusters' finished running")
# Time <10 sec
# create flowFrame for FlowSOM input (using t-SNE axes as input)
matrix <- as.matrix(tsne.data)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
# implement the FlowSOM on the data by running the line below (to see help page
# for FlowSOM, type "?FlowSOM --> enter" in console)
fsom <-
FlowSOM(
flowframe,      # input flowframe
colsToUse = c(1:2),  # columns to use
nClus = CLUSTER_NUM,          # target number of clusters (this can be changed)
seed = OVERALL_SEED  # set seed for reproducibility
)
FlowSOM.clusters.tsne <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
cat("\n\n...'run_FlowSOM_on_t-SNE' finished running")
# Time <10 sec
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors,
rownames(qual_col_pals)))
# plot FlowSOM clusters on t-SNE axes
ggplot(tsne.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.tsne), cex = 0.3) +
labs(x = "t-SNE 1", y = "t-SNE 2",title = "FlowSOM Clustering on t-SNE Axes",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4))) +
scale_color_manual(values = sample(col_vector)) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
cat("\n\n...'plot_t-SNE_FlowSOM_clusters' finished running")
# Time ~ 1-2 min
# run FlowSOM on the t-SNE axes while varying cluster number
for (i in seq(5,45,by = 10)){
matrix <- as.matrix(tsne.data)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
fsom <-
FlowSOM(
flowframe,
colsToUse = c(1:2),
nClus = i,
seed = OVERALL_SEED
)
FlowSOM.clusters.vary <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
# plot FlowSOM clusters on t-SNE axes
legend.col = round(max(as.numeric(as.vector(FlowSOM.clusters.vary)))/3)
print(ggplot(tsne.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.vary), cex = 0.3) +
labs(x = "t-SNE 1", y = "t-SNE 2",title = "FlowSOM Clustering on t-SNE Axes",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4),
nrow = legend.col)) +
scale_color_manual(values = sample(col_vector)) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))}
cat("\n\n...'t-SNE_FlowSOM_varying_cluster_number' finished running")
# Time ~ 1 min
# create flowFrame for FlowSOM input (using orginal markers as input)
matrix <- as.matrix(transformed.chosen.markers)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
# implement the FlowSOM on the data by running the line below
fsom <-
FlowSOM(
flowframe,
colsToUse = c(1:ncol(transformed.chosen.markers)),
nClus = CLUSTER_NUM,
seed = OVERALL_SEED
)
FlowSOM.clusters.OG <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
# plot FlowSOM clusters on t-SNE axes
ggplot(tsne.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.OG), cex = 0.2) +
labs(x = "t-SNE 1", y = "t-SNE 2",
title = "FlowSOM Clustering on Original Markers", color = "Cluster") +
theme_bw() + scale_color_manual(values = sample(col_vector)) +
guides(colour = guide_legend(override.aes = list(size=4))) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
cat("\n\n...'FlowSOM_on_original_markers' finished running")
# Time ~ 1-2 min
# run FlowSOM on original markers while varying cluster number
for (i in seq(5,45,by = 10)){
matrix <- as.matrix(transformed.chosen.markers)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
fsom <-
FlowSOM(
flowframe,
colsToUse = c(1:ncol(transformed.chosen.markers)),
nClus = i,
seed = OVERALL_SEED
)
FlowSOM.clusters.vary <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
# plot FlowSOM clusters on t-SNE axes
legend.col = round(max(as.numeric(as.vector(FlowSOM.clusters.vary)))/3)
print(ggplot(tsne.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.vary), cex = 0.2) +
labs(x = "t-SNE 1", y = "t-SNE 2",title = "FlowSOM Clustering on Original Markers",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4),
nrow = legend.col)) +
scale_color_manual(values = sample(col_vector)) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))}
cat("\n\n...'original_markers_FlowSOM_varying_cluster_number' finished running")
# Time <10 sec
# create flowFrame for FlowSOM input (using UMAP axes as input)
matrix <- as.matrix(umap.data)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
# implement the FlowSOM on the data by running the line below
fsom <-
FlowSOM(
flowframe,
colsToUse = c(1:2),
nClus = CLUSTER_NUM,
seed = OVERALL_SEED
)
FlowSOM.clusters.umap <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
# plot FlowSOM clusters on UMAP axes
ggplot(umap.plot) + coord_fixed(ratio=graphical.ratio.umap) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.umap), cex = 0.3) +
labs(x = "UMAP 1", y = "UMAP 2",title = "FlowSOM Clustering on UMAP Axes",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4)))+
scale_color_manual(values = sample(col_vector))+
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
cat("\n\n...FlowSOM_on_UMAP' finished running")
# Time ~ 1-2 min
# run FlowSOM on the UMAP axes while varying cluster number
for (i in seq(5,45,by = 10)){
matrix <- as.matrix(umap.data)
metadata <-
data.frame(name = dimnames(matrix)[[2]],
desc = dimnames(matrix)[[2]])
metadata$range <- apply(apply(matrix, 2, range), 2, diff)
metadata$minRange <- apply(matrix, 2, min)
metadata$maxRange <- apply(matrix, 2, max)
flowframe <- new("flowFrame",
exprs = matrix,
parameters = AnnotatedDataFrame(metadata))
fsom <-
FlowSOM(
flowframe,
colsToUse = c(1:2),
nClus = i,
seed = OVERALL_SEED
)
FlowSOM.clusters.vary <-
as.matrix(fsom[[2]][fsom[[1]]$map$mapping[, 1]])
# plot FlowSOM clusters on UMAP axes
legend.col = round(max(as.numeric(as.vector(FlowSOM.clusters.vary)))/3)
print(ggplot(umap.plot) + coord_fixed(ratio=graphical.ratio.tsne) +
geom_point(aes(x=x, y=y, color=FlowSOM.clusters.vary), cex = 0.3) +
labs(x = "UMAP 1", y = "UMAP 2",title = "FlowSOM Clustering on UMAP Axes",
color = "Cluster") + theme_bw() +
guides(colour = guide_legend(override.aes = list(size=4),
nrow = legend.col)) +
scale_color_manual(values = sample(col_vector)) +
labs(caption = "Data from Diggins et al., Nat Methods 2017, 14: 275-278 \nFlow Repository: FR-FCM-ZY63") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank()))}
cat("\n\n...'UMAP_FlowSOM_varying_cluster_number' finished running")
# Time <10 sec
# Load all libraries
# If you get an error message, you will need to try re-installing packages by
# going back to the 00_install_tools.RMD script
library(FlowSOM)
library(flowCore)
library(Biobase)
library(ggplot2)
library(hexbin)
library(viridis)
library(ggExtra)
library(RColorBrewer)
library(MEM)
library(tidyverse)
library(Rtsne)
library(uwot)
cat("\n\n...'setup' finished running")
# Time ~30 sec
# Run MEM on the FlowSOM clusters found from using t-SNE axes
cluster = as.numeric(as.vector((FlowSOM.clusters.tsne)))
MEM.data = cbind(transformed.chosen.markers, cluster)
MEM.values.tf = MEM(
MEM.data,              # input data (last column must contain cluster values)
transform = FALSE,     # data is already scaled in this case
cofactor = 1,
choose.markers = FALSE,
markers = "all",       # use all transformed, chosen markers from previous
# selection
choose.ref = FALSE,    # reference will be all other cells
zero.ref = FALSE,
rename.markers = FALSE,
new.marker.names = "CD19,CD117,CD11b,CD4,CD8,CD20,CD34,CD61,CD123,CD45RA,CD45,CD10,CD33,CD11c,CD14,CD69,CD15,CD16,CD44,CD38,CD25,CD3,IgM,HLA-DR,CD56", # rename channels for labels
file.is.clust = FALSE,
add.fileID = FALSE,
IQR.thresh = NULL
)
# build MEM heatmap and output enrichment scores
build.heatmaps(
MEM.values.tf,                # input MEM values
cluster.MEM = "both",         # dendrogram for columns and rows
display.thresh = 2,           # display threshold for MEM scores
newWindow.heatmaps = FALSE,
output.files = TRUE,          # makes txt and PDF files for heatmap and MEM
# scores
labels = TRUE,                # include labels in heatmap
only.MEMheatmap = FALSE
)
cat("\n\n...run_MEM_on_FlowSOM_on_t-SNE' finished running")
# Time ~30 sec
cluster = as.numeric(as.vector((FlowSOM.clusters.OG)))
MEM.data = cbind(transformed.chosen.markers, cluster)
MEM.values.ogf = MEM(
MEM.data,
transform = FALSE,
cofactor = 1,
choose.markers = FALSE,
markers = "all",
choose.ref = FALSE,
zero.ref = FALSE,
rename.markers = FALSE,
new.marker.names = "CD19,CD117,CD11b,CD4,CD8,CD20,CD34,CD61,CD123,CD45RA,CD45,CD10,CD33,CD11c,CD14,CD69,CD15,CD16,CD44,CD38,CD25,CD3,IgM,HLA-DR,CD56", # rename channels for labels
file.is.clust = FALSE,
add.fileID = FALSE,
IQR.thresh = NULL
)
build.heatmaps(
MEM.values.ogf,
cluster.MEM = "both",
display.thresh = 2,
newWindow.heatmaps = FALSE,
output.files = TRUE,
labels = TRUE,
only.MEMheatmap = FALSE
)
cat("\n\n...run_MEM_on_FlowSOM_on_original' finished running")
# Time ~30 sec
cluster = as.numeric(as.vector((FlowSOM.clusters.umap)))
MEM.data = cbind(transformed.chosen.markers, cluster)
MEM.values.uf = MEM(
MEM.data,
transform = FALSE,
cofactor = 1,
choose.markers = FALSE,
markers = "all",
choose.ref = FALSE,
zero.ref = FALSE,
rename.markers = FALSE,
new.marker.names = "CD19,CD117,CD11b,CD4,CD8,CD20,CD34,CD61,CD123,CD45RA,CD45,CD10,CD33,CD11c,CD14,CD69,CD15,CD16,CD44,CD38,CD25,CD3,IgM,HLA-DR,CD56", # rename channels for labels
file.is.clust = FALSE,
add.fileID = FALSE,
IQR.thresh = NULL
)
build.heatmaps(
MEM.values.uf,
cluster.MEM = "both",
display.thresh = 2,
newWindow.heatmaps = FALSE,
output.files = TRUE,
labels = TRUE,
only.MEMheatmap = FALSE
)
cat("\n\n...run_MEM_on_FlowSOM_on_UMAP' finished running")
# Time ~30 sec
MEM.values.orig = MEM(
combined.data,
transform = TRUE,
cofactor = 15,
choose.markers = FALSE,
markers = "12:20,22:23,25:33,35:36,38:40",
choose.ref = FALSE,
zero.ref = FALSE,
rename.markers = FALSE,
new.marker.names = "CD19,CD117,CD11b,CD4,CD8,CD20,CD34,CD61,CD123,CD45RA,CD45,CD10,CD33,CD11c,CD14,CD69,CD15,CD16,CD44,CD38,CD25,CD3,IgM,HLA-DR,CD56",
file.is.clust = FALSE,
add.fileID = FALSE,
IQR.thresh = NULL
)
build.heatmaps(
MEM.values.orig,
cluster.MEM = "both",
display.thresh = 2,
newWindow.heatmaps = FALSE,
output.files = TRUE,
labels = TRUE,
only.MEMheatmap = FALSE
)
cat("\n\n...run_MEM_on_manually_gated_pops' finished running")
# RMSD to compare labels from all populations (FlowSOM clusters vs. manually
# gated populations)
orig.MEM.scores = as.data.frame(MEM.values.orig[[5]])
rownames(orig.MEM.scores) = paste0(rownames(orig.MEM.scores), " (Manual)")
ogf.MEM.scores = as.data.frame(MEM.values.ogf[[5]])
rownames(ogf.MEM.scores) = paste0(rownames(ogf.MEM.scores), " (OG/fSOM)")
uf.MEM.scores = as.data.frame(MEM.values.uf[[5]])
rownames(uf.MEM.scores) = paste0(rownames(uf.MEM.scores), ' (UMAP/fSOM)')
tf.MEM.scores = as.data.frame(MEM.values.tf[[5]])
rownames(tf.MEM.scores) = paste0(rownames(tf.MEM.scores), ' (t-SNE/fSOM)')
all.MEM.values = as.matrix(rbind(orig.MEM.scores, ogf.MEM.scores, uf.MEM.scores, tf.MEM.scores))
RMSD_vals <-
MEM_RMSD(
all.MEM.values,                # input all MEM values from clustering and
# expert gating
format = NULL,
newWindow.heatmaps = FALSE,
output.matrix = TRUE
)
cat("\n\n...run_RMSD_on_clusters' finished running")
rm(ls())
rm(list=ls())
help(gsub)
library(Seurat)
ReadData <- function(matrix.dir, make.sparse = T) {
if (dir.exists(matrix.dir)) {
if (!grepl("\\/$", matrix.dir)) { matrix.dir <- paste(matrix.dir, "/", sep = "") }
barcode.loc <- paste0(matrix.dir, "barcodes.tsv.gz")
gene.loc <- paste0(matrix.dir, "features.tsv.gz")
matrix.loc <- paste0(matrix.dir, "matrix.mtx.gz")
if (!file.exists(barcode.loc)) {
barcode.loc <- paste0(matrix.dir, "barcodes.tsv")
if (!file.exists(barcode.loc)) stop("Barcode file missing")
}
if (!file.exists(gene.loc)) {
genes.loc <- paste0(matrix.dir, "features.tsv")
if (!file.exists(genes.loc)) {
genes.loc <- paste0(matrix.dir, "genes.tsv")
if (!file.exists(genes.loc)) stop("Gene name file missing")
}
}
if (!file.exists(matrix.loc)) {
matrix.loc <- paste0(matrix.dir, "matrix.mtx")
if (!file.exists(matrix.loc)) stop("Expression matrix file missing")
}
counts <- Matrix::readMM(file = matrix.loc)
cell.names <- readLines(barcode.loc)
gene.names <- readLines(gene.loc)
if (all(grepl(pattern = "\\-1$", cell.names))) {
cell.names <- as.vector(as.character(sapply(cell.names, ExtractField, field = 1, delim = "-")))
}
rownames(counts) <- make.unique(names = as.character(sapply(gene.names, ExtractField, field = 2, delim = "\\t")))
colnames(counts) <- cell.names
} else {
counts <- as.matrix(read.table(matrix.dir, sep = "\t", header = T, row.names = 1))
}
colnames(counts) <- make.names(colnames(counts))
if (make.sparse) {
counts <- as(counts, "dgCMatrix")
}
return(counts)
}
FilterData <- function(x, min.samples.frac, trim, min.nonzero.features = 500, max.sample.sum = 50000) {
if (is.data.frame(x) | is.matrix(x)) {
x <- as(as.matrix(x), "dgCMatrix")
}
min.cells <- round(ncol(x)*min.samples.frac)
x <- x[ , Matrix::colSums(x) < max.sample.sum]
x <- x[ , Matrix::colSums(x > 0) > min.nonzero.features]
x <- x[Matrix::rowSums(x > 0) > min.cells, ]
# if (trim > 0) {
#   x <- t(winsorize_matrix(t(x), trim = trim))
# }
return(x)
}
winsorize_matrix <- function(mat, trim) {
if(trim < 1) {
trim <- trim*ncol(mat)
}
mat <- t(mat)
inplaceWinsorizeSparseCols(mat, trim)
return(t(mat))
}
matrix.file <- "up-tf-stem.counts.tsv" ## Input counts matrix
regress.batch <- TRUE
min.cells.frac <- 0.01 ## Fraction of cells expressing gene in order to include
min.genes.exp <- 300 ## Minimum number of expressed genes for a cell
regress.model <- "negbinom" ## Model for regressing out unwanted effects
min.expr <- 0.1 ## Minimum average expression for variable genes
min.var.z <- 0.5 ## Minimum Z-score for variable genes
pcs.use <- 30 ## Number of PCs to use for clustering
cluster.res <- 1.8 ## Cluster resolution
min.conn <- 1e-4 ## Minimum SNN connectivity between clusters to calculate accuracy
acc.cutoff <- 0.95 ## Minimum classification accuracy to keep clusters separate
counts <- ReadData(matrix.file)
setwd("/Users/Wanying/Desktop/Final project/Data and code/")
counts <- ReadData(matrix.file)
counts <- FilterData(counts, min.cells.frac,trim, min.genes.exp)
nUMI <- Matrix::colSums(counts)
## Check for batch effects
batch <- factor(sapply(colnames(counts), function(x) strsplit(x, split = "\\.")[[1]][[2]]))
pd <- data.frame(nUMI, batch)
## Mitochondrial fraction
mito.genes <- grep("^MT-", rownames(counts), value = T)
pd$percent.mt <- Matrix::colSums(counts[mito.genes, ])/Matrix::colSums(counts)
counts <- counts[!rownames(counts) %in% mito.genes,]
se.obj <- CreateSeuratObject(counts = counts, project = "10x", meta.data = pd, min.cells = 3, min.features = 200)
se.obj <- FindVariableFeatures(se.obj)
se.obj <- ScaleData(se.obj, vars.to.regress = c("nUMI", "percent.mt"),
features = se.obj@assays$RNA@var.features, model.use=regress.model)
se.obj <- RunPCA(se.obj, npcs=40, features = se.obj@assays$RNA@var.features)
se.obj <- FindNeighbors(se.obj, dims = 1:30, k.param = 30, prune.SNN = 1/20)
se.obj <- FindClusters(se.obj, resolution = 0.4)
se.obj <- FindClusters(se.obj, resolution = 0.3)
se.obj <- FindClusters(se.obj, resolution = 0.35)
se.obj <- FindClusters(se.obj, resolution = 0.38)
se.obj <- RunTSNE(se.obj, dims.use = 1:10) # Default is set to 30 by author
saveRDS(se.obj, file = "up-tf-stem.counts.rds") # Save the object for future
DimPlot(se.obj, reduction = "tsne")
se.obj <- RunTSNE(se.obj, dims.use = 1:30) # Default is set to 30 by author
DimPlot(se.obj, reduction = "tsne")
jpeg(filename = 'output.jpg', width=600, height=500, res=100, quality=400)
DimPlot(se.obj, reduction = "tsne")
dev.off()
setwd("/Users/Wanying/Desktop/IGP_2020_spring/MM2-1_Quantitative Systems Biology in Single Cells/QSBSC_Class_2020/Users/Wanying/Final_project/Remake_plot/")
library(Seurat)
r <- readRDS(paste(file.handle, "clustering.Robj", sep = "_"))
r <- readRDS("up-tf-stem_clustering.Robj", sep = "_"))
r <- readRDS("up-tf-stem_clustering.Robj")
r <- UpdateSeuratObject(r)
## tSNE plots (Figure 1c-e)
plot.seed <- 32907098
tsne.emb <- Embeddings(object = r, reduction = "tsne")
DimPlot(tsne.emb, sample.groups = clusters, pt.size = 0.75, alpha.plot = 0.5, label.size = 6, do.label = T,
show.legend = F, seed = plot.seed)
DimPlot(tsne.emb, pt.size = 0.75, label.size = 6)
DimPlot(tsne.emb)
DimPlot(tsne.emb, reduction = "tsne")
DimPlot(r, reduction = "tsne")
help(Embeddings)
jpeg(filename = 'output_with_demo_code.jpg', width=600, height=500, res=100, quality=400)
DimPlot(r, reduction = "tsne")
dev.off()
